@page "/"
@using EdizonCategorizer.Data
@using System.IO
@using EdizonCategorizer.Shared.Components
@inject CheatsRepository repository;
@inject IJSRuntime js

<PageTitle>Edizon Overlay SubMenu Cheat Thingy</PageTitle>

<h1 class="pb-2 pt-2">Categorize your stuff</h1>

<InputFile accept=".txt" OnChange="@ReadCheatFile"></InputFile>

<button type="button" class="btn btn-success m-1" @onclick="DownloadCheats">Save</button>
<button class="btn btn-primary btn-sm rounded-0 m-1" type="button" data-toggle="tooltip" data-placement="top" title="Add Section" @onclick="AddNewSection">
    <i class="oi oi-plus"></i>
</button>

<CheatsContainer Sections="cheats" OnStatusUpdated="@(() => ShouldRender())">
    @foreach (var section in cheats)
    {
        <CheatSection Section="section" KillMe="KillMe"/>
    }
</CheatsContainer>


@code {

    private string filename = "penis";
    private async Task ReadCheatFile(InputFileChangeEventArgs obj)
    {
        if (!obj.File.Name.EndsWith(".txt") || obj.File.Size > 100000)
        {
            await js.InvokeVoidAsync("alert", "Nice try -.-");
            return;
        }
        
        Console.WriteLine("[Input]: {0}", obj.File.Name);
        
        filename = obj.File.Name;
        var path = Path.Combine(Path.GetTempPath(),obj.File.Name);
        FileStream fs = new(path, FileMode.Create);
        await obj.File.OpenReadStream().CopyToAsync(fs);
        await fs.FlushAsync();
        await fs.DisposeAsync();

        cheats = repository.DeserializeFrom(path).ToList();
        File.Delete(path);
    }

    private async Task DownloadCheats()
    {
        var ms = new MemoryStream();
        var writer = new StreamWriter(ms);
        writer.AutoFlush = true;
        
        foreach (var cheatSection in cheats.Skip(2).Where(x => x.Cheats.Any()))
        {
            await writer.WriteLineAsync($"[--SectionStart:{cheatSection.Name}--]");
            await writer.WriteLineAsync("00000000 00000000 00000000" + Environment.NewLine);
            foreach (var (name, content) in cheatSection.Cheats)
                await writer.WriteLineAsync(name + Environment.NewLine + content);
            
            await writer.WriteLineAsync($"[--SectionEnd:{cheatSection.Name}--]");
            await writer.WriteLineAsync("00000000 00000000 00000000" + Environment.NewLine);
        }
        
        cheats[1].Cheats.ForEach(x => writer.WriteLine(x.Name + Environment.NewLine + x.Content));
        
        ms.Seek(0, SeekOrigin.Begin);
        
        using var streamRef = new DotNetStreamReference(stream: ms);
        await js.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }

    private List<Data.CheatSection> cheats = new();

    private void KillMe(string sectionName)
    {
        cheats.RemoveAll(x => x.Name.Equals(sectionName));
        StateHasChanged();
    }

    private void AddNewSection()
    {
        cheats.Add(new Data.CheatSection("TODO", new List<Cheat>()));
        StateHasChanged();
    }

}