// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TheCheatsRepositoryAllowsDeserializingExistingCheatFilesIntoTheDomainModel_Feature : object, Xunit.IClassFixture<TheCheatsRepositoryAllowsDeserializingExistingCheatFilesIntoTheDomainModel_Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CheatsRepository.feature"
#line hidden
        
        public TheCheatsRepositoryAllowsDeserializingExistingCheatFilesIntoTheDomainModel_Feature(TheCheatsRepositoryAllowsDeserializingExistingCheatFilesIntoTheDomainModel_Feature.FixtureData fixtureData, UnitTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "The cheatsRepository allows deserializing existing cheat files into the domain mo" +
                    "del.", "\tIt furthers can serialize existing sections into a stream that is ready to be us" +
                    "ed with the\n\tbetter edizon overlay: https://github.com/proferabg/EdiZon-Overlay", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="If a file with no contents is deserialized, it at least provides a empty section " +
            "for uncategorized cheats")]
        [Xunit.TraitAttribute("FeatureTitle", "The cheatsRepository allows deserializing existing cheat files into the domain mo" +
            "del.")]
        [Xunit.TraitAttribute("Description", "If a file with no contents is deserialized, it at least provides a empty section " +
            "for uncategorized cheats")]
        public virtual void IfAFileWithNoContentsIsDeserializedItAtLeastProvidesAEmptySectionForUncategorizedCheats()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If a file with no contents is deserialized, it at least provides a empty section " +
                    "for uncategorized cheats", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.When("I deserialize a file with the content", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("exists 1 sections", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("the section \"UnCategorized\" contains 0 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cheats without a prior section are appended to the UnCategorized section")]
        [Xunit.TraitAttribute("FeatureTitle", "The cheatsRepository allows deserializing existing cheat files into the domain mo" +
            "del.")]
        [Xunit.TraitAttribute("Description", "Cheats without a prior section are appended to the UnCategorized section")]
        public virtual void CheatsWithoutAPriorSectionAreAppendedToTheUnCategorizedSection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cheats without a prior section are appended to the UnCategorized section", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
 testRunner.When("I deserialize a file with the content", @"
[Infinite Health]
580f0000 02ca1a78
580f1000 00000080
780f0000 00000848
610f0000 00000000 00000078


[Max Hearts]
580f0000 02c9fd70
580f1000 00000038
780f0000 000002a8
640f0000 00000000 42f00000


[Infinite Powers]
580f0000 02ca1a78
580f1000 00000080
780f0000 00001CC8
610f0000 00000000
00000063 780f0000
00000004 610f0000
00000000 00000063
780f0000 00000004
610f0000 00000000 00000063
", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("exists 1 sections", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("the section \"UnCategorized\" contains 3 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table1.AddRow(new string[] {
                            "[Infinite Health]",
                            "580f0000 02ca1a78 580f1000 00000080 780f0000 00000848 610f0000 00000000 00000078"});
                table1.AddRow(new string[] {
                            "[Infinite Powers]",
                            "580f0000 02ca1a78 580f1000 00000080 780f0000 00001CC8 610f0000 00000000 00000063 " +
                                "780f0000 00000004 610f0000 00000000 00000063 780f0000 00000004 610f0000 00000000" +
                                " 00000063"});
#line 45
 testRunner.And("the section \"UnCategorized\" contains the cheats", ((string)(null)), table1, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Preceeding useless crap is removed")]
        [Xunit.TraitAttribute("FeatureTitle", "The cheatsRepository allows deserializing existing cheat files into the domain mo" +
            "del.")]
        [Xunit.TraitAttribute("Description", "Preceeding useless crap is removed")]
        public virtual void PreceedingUselessCrapIsRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Preceeding useless crap is removed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.When("I deserialize a file with the content", "\n[Penis]\n[Yeeeah]\n\n[SomeOtherEmptyTag]\n\n[NowARealCheat]\n04000000 0238FED0 5280004" +
                        "0\n", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("the section \"UnCategorized\" contains 1 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table2.AddRow(new string[] {
                            "[NowARealCheat]",
                            "04000000 0238FED0 52800040"});
#line 64
 testRunner.And("the section \"UnCategorized\" contains the cheats", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="If the content of a Cheat is 00000000 00000000 00000000 it is treated as a sectio" +
            "n for all following cheats")]
        [Xunit.TraitAttribute("FeatureTitle", "The cheatsRepository allows deserializing existing cheat files into the domain mo" +
            "del.")]
        [Xunit.TraitAttribute("Description", "If the content of a Cheat is 00000000 00000000 00000000 it is treated as a sectio" +
            "n for all following cheats")]
        public virtual void IfTheContentOfACheatIs000000000000000000000000ItIsTreatedAsASectionForAllFollowingCheats()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If the content of a Cheat is 00000000 00000000 00000000 it is treated as a sectio" +
                    "n for all following cheats", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
 testRunner.When("I deserialize a file with the content", "[-- TestSection --]\n00000000 00000000 00000000\n\n[1. TestSectionCheat]\n680f0000 45" +
                        "3b8000 453b8000\n\n[2. TestSectionCheat]\n610f0000 00000000 00000063\n", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("the section \"UnCategorized\" contains 0 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.And("the section \"TestSection\" contains 2 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table3.AddRow(new string[] {
                            "[1. TestSectionCheat]",
                            "680f0000 453b8000 453b8000"});
                table3.AddRow(new string[] {
                            "[2. TestSectionCheat]",
                            "610f0000 00000000 00000063"});
#line 83
 testRunner.And("the section \"TestSection\" contains the cheats", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="If a file already contains sections it can still be deserialized")]
        [Xunit.TraitAttribute("FeatureTitle", "The cheatsRepository allows deserializing existing cheat files into the domain mo" +
            "del.")]
        [Xunit.TraitAttribute("Description", "If a file already contains sections it can still be deserialized")]
        public virtual void IfAFileAlreadyContainsSectionsItCanStillBeDeserialized()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If a file already contains sections it can still be deserialized", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.When("I deserialize a file with the content", @"[--SectionStart:Hearts--]
00000000 00000000 00000000

[Infinite Health]
580f0000 02ca1a78
580f1000 00000080
780f0000 00000848
610f0000 00000000 00000078


[Max Hearts]
580f0000 02c9fd70
580f1000 00000038
780f0000 000002a8
640f0000 00000000 42f00000


[--SectionEnd:Hearts--]
00000000 00000000 00000000

[--SectionStart:Misc--]
00000000 00000000 00000000

[999999 Rupees]
580f0000 02cc5fe0
580f1000 00000e40
580f1000 00005b08
780f0000 00005d90
640f0000 00000000 000f423f


[Current Arrow 999 Enter Equipment Menu to Refill]
580f0000 02ca6d48
580f1000 000447e8
780f0000 00000020
620f0000 00000000 000003e7


[--SectionEnd:Misc--]
00000000 00000000 00000000

[Infinite Stamina]
580f0000 02c9fd70
580f1000 00000038
780f0000 000002ac
680f0000 453b8000 453b8000

[Infinite Powers]
580f0000 02ca1a78
580f1000 00000080
780f0000 00001CC8
610f0000 00000000
00000063 780f0000
00000004 610f0000
00000000 00000063
780f0000 00000004
610f0000 00000000 00000063", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("the section \"UnCategorized\" contains 2 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.And("the section \"Hearts\" contains 2 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
 testRunner.And("the section \"Misc\" contains 2 cheats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table4.AddRow(new string[] {
                            "[Infinite Powers]",
                            "580f0000 02ca1a78 580f1000 00000080 780f0000 00001CC8 610f0000 00000000 00000063 " +
                                "780f0000 00000004 610f0000 00000000 00000063 780f0000 00000004 610f0000 00000000" +
                                " 00000063"});
#line 152
 testRunner.And("the section \"UnCategorized\" contains the cheats", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table5.AddRow(new string[] {
                            "[Max Hearts]",
                            "580f0000 02c9fd70 580f1000 00000038 780f0000 000002a8 640f0000 00000000 42f00000"});
                table5.AddRow(new string[] {
                            "[Infinite Health]",
                            "580f0000 02ca1a78 580f1000 00000080 780f0000 00000848 610f0000 00000000 00000078"});
#line 156
 testRunner.And("the section \"Hearts\" contains the cheats", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TheCheatsRepositoryAllowsDeserializingExistingCheatFilesIntoTheDomainModel_Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TheCheatsRepositoryAllowsDeserializingExistingCheatFilesIntoTheDomainModel_Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
