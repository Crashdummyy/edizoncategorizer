@page "/"
@using EdizonCategorizer.Data
@using System.IO
@using EdizonCategorizer.Shared.Components
@using CheatSection = EdizonCategorizer.Data.CheatSection
@inject CheatsRepository repository;
@inject IJSRuntime js

<PageTitle>Edizon Overlay SubMenu Cheat Thingy</PageTitle>

<div class="row pb-2 pt-2">
    <h2 class="col-auto">Categorize your stuff</h2>
    <a href="LivingDoc.html" class="col"><i class="oi oi-question-mark"></i></a>
</div>

<InputFile accept=".txt" OnChange="@ReadCheatFile"></InputFile>

<button type="button" class="btn btn-success m-1" @onclick="DownloadCheats">Save</button>
<button class="btn btn-primary btn-sm rounded-0 m-1" type="button" data-toggle="tooltip" data-placement="top" title="Add Section" @onclick="AddNewSection">
    <i class="oi oi-plus"></i>
</button>

<CheatsContainer Sections="cheats" OnStatusUpdated="@(() => ShouldRender())">
    @foreach (var section in cheats)
    {
        <CheatSection Section="section" KillMe="KillMe"/>
    }
</CheatsContainer>


@code {

    private string filename = "InsertTitleId.txt";
    private async Task ReadCheatFile(InputFileChangeEventArgs obj)
    {
        if (!obj.File.Name.EndsWith(".txt") || obj.File.Size > 100000)
        {
            await js.InvokeVoidAsync("alert", "Nice try -.-");
            return;
        }
        
        Console.WriteLine("[Input]: {0}", obj.File.Name);

        using var readStream = new MemoryStream();
        await obj.File.OpenReadStream().CopyToAsync(readStream);
        readStream.Seek(0, SeekOrigin.Begin);
        using var reader = new StreamReader(readStream);
        cheats = repository.DeserializeFrom(reader)
                           .ToList();
    }

    private async Task DownloadCheats()
    {
        var ms = await repository.Serialize(cheats);
        using var streamRef = new DotNetStreamReference(stream: ms);
        await js.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }

    private List<CheatSection> cheats = new() { new CheatSection("UnCategorized", new List<Cheat>()) };

    private void KillMe(string sectionName)
    {
        cheats.RemoveAll(x => x.Name.Equals(sectionName));
        StateHasChanged();
    }

    private void AddNewSection()
    {
        cheats.Add(new CheatSection("TODO", new List<Cheat>()));
        StateHasChanged();
    }

}