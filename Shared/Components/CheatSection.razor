@if (Section != null)
{
    <div class="cheat-section col-xl-3 col-lg-4 col-6">
        <div>
            <div class="row">
                <input type="text" @bind="Section.Name" class="text-white bg-black col-9"/>
                <button class="btn btn-danger btn-sm rounded-0 col" type="button" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="DeleteSection">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
        <ul class="dropzone @dropClass" 
            ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);"
            @ondrop="HandleDrop"
            @ondragenter="HandleDragEnter"
            @ondragleave="HandleDragLeave"
            @ontouchmove:preventDefault
            @ontouchcancel:preventDefault
            @ontouchcancel:stopPropagation
            @ontouchmove:stopPropagation>

            <div class="row">
            @foreach (var cheat in Section.Cheats)
            {
                <CheatView CheatModel="cheat" />
            }
            </div>
        </ul>
    </div>
}

@code {

    private string dropClass = string.Empty;
    
    [CascadingParameter] 
    public CheatsContainer Container { get; set; }

    [Parameter]
    public Data.CheatSection? Section { get; set; }
    
    [Parameter]
    public Action<string>? KillMe { get; set; }
    
    protected override void OnParametersSet()
    {
        Section = Container.Sections.FirstOrDefault(x => x.Name.Equals(Section?.Name));
    }

    private void HandleDragEnter() => dropClass = "can-drop";

    private void HandleDragLeave() => dropClass = string.Empty;

    private async Task HandleDrop(DragEventArgs obj)
    {
        dropClass = string.Empty;
        await Container.MoveCheat(Section?.Name ?? string.Empty);
    }

    private void DeleteSection() => KillMe?.Invoke(Section?.Name ?? string.Empty);
}